# Знакомство с языком Python (семинары)
# Урок 4. Словари, множества и профилирование

# домашняя работа №4
# Задача 22: Даны два неупорядоченных набора целых чисел (может быть, с
# повторениями). Выдать без повторений в порядке возрастания все те числа, которые
# встречаются в обоих наборах.
# Пользователь вводит 2 числа. n - кол-во элементов первого множества. m - кол-во
# элементов второго множества. Затем пользователь вводит сами элементы множеств.
# 11 6
# 2 4 6 8 10 12 10 8 6 4 2
# 3 6 9 12 15 18
# 6 12

# a = {2, 4, 6, 8, 10, 12, 10, 8, 6, 4, 2} 
# b = {3, 6, 9, 12, 15, 18}
# i = a.intersection(b) #  пересечение т.е найти те элементы, которые есть в обеих множествах
# print(i) # {12, 6} это работает, но не по возрастанию (quick_sor)
# quicksort({12, 6})
# def maximum(x, y):
#     if x > y:
#         return x
#     elif x == y:
#         return "Числа равны"
#     else:  # return и так возвращает  else не нужен здесь
#         return y  # print(a, if a > b, b, if b > a
# print(maximum(12, 6))
arr_n = int(input('Введи размер первого массива: '))
arr_m = int(input('Введи размер второго массива: '))
import random
arr_n = [random.randint(0, 11) for i in range(arr_n)] #  рандомно заполнили список
arr_m = [random.randint(0, 6) for i in range(arr_m)]
arr_1 = set(arr_n)  #  передали список в множество 
arr_2 = set(arr_m)
inters = arr_1.intersection(arr_2) #  пересечение т.е найти те элементы, которые есть в обеих множествах
print(*arr_n, sep ='    ')
print(*arr_m, sep ='    ')
print(*sorted(inters), sep ='    ')



# Задача 24: В фермерском хозяйстве в Карелии выращивают чернику. Она растет на
# круглой грядке, причем кусты высажены только по окружности. Таким образом, у
# каждого куста есть ровно два соседних. Всего на грядке растет N кустов.
# Эти кусты обладают разной урожайностью, поэтому ко времени сбора на них
# выросло различное число ягод – на i-ом кусте выросло ai ягод.
# В этом фермерском хозяйстве внедрена система автоматического сбора черники.
# Эта система состоит из управляющего модуля и нескольких собирающих модулей.
# Собирающий модуль за один заход, находясь непосредственно перед некоторым
# кустом, собирает ягоды с этого куста и с двух соседних с ним.
# Напишите программу для нахождения максимального числа ягод, которое может
# собрать за один заход собирающий модуль, находясь перед некоторым кустом
# заданной во входном файле грядки.
# 4 -> 1 2 3 4
# 9

cnt = int(input('Введите количество кустов:  '))
import random
arr_1 = [random.randint(0, 10) for i in range(cnt)] # рандомно собрали на кустах ягоды
print('Ягоды на кустах: ', *arr_1, sep= '  ')

b = 0 # переменная где хранятся ягоды с трех кустов

for i in range(1, (len(arr_1) - 1)): # для кустов и слева и справа   
    if arr_1[i] + arr_1[i-1] + arr_1[i+1] > b:  # если  значения по индексам трех кустов больше нуля
        b = arr_1[i] + arr_1[i-1] + arr_1[i+1]  # присвоили значение трех кустов больше нуля, чтобы начать цикл заново и уже сравнивать с новым значением
print(b)