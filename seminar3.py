# Дана последовательность из N целых чисел и число K. Необходимо сдвинуть всю последовательность
# (сдвиг - циклический) на K элементов вправо,  K – положительное число.
# Input:   [1, 2, 3, 4, 5] k = 3
# Output:  [3, 4, 5, 1, 2]

# lst = [1, 2, 3, 4, 5]
# k = 3
# for i in range(k):
#     num = lst.pop(-1)
#     lst.insert(0, num)
# print(lst)

# Напишите программу для печати всех уникальных значений в словаре. 
# Input:  [{"V": "S001"}, {"V": "S002"}, {"VI": "S001"}, {"VI": "S005"},
# {"VII": "S005"}, {"V":"S009"}, {"VIII":"S007"}] 
# Output: {'S005', 'S002', 'S007', 'S001', 'S009'}

# достали словарь из словаря:
# shop_dict = {0:{'name':'стул','кол-во': 3} , 5:{'name': 'стол','кол-во': 7} , 8:{'name': 'диван' , 'кол-во': 10}}
# print(shop_dict[5]['name'])

# 11:5
# start_lst = [{"V": "S001"}, {"V": "S002"}, {"VI": "S001"}, {"VI": "S005"}, {"VII": "S005"}, {"V":"S009"}, {"VIII":"S007"}]

# val_list = []  #  создал пустой лист
# for little_dict in start_lst:  # для маленького словаря из данного словаря?
#     for val in little_dict.values():  # для  значений маленького словаря добавить?
#         val_list.append(val)
# print(set(val_list)) # напечатсть и создать пустой лист?

# домашка
# 20 задача
# Напишите программу, которая вычисляет стоимость введенного пользователем слова.
# Будем считать, что на вход подается только одно слово, которое содержит либо только
# английские, либо только русские буквы.

# start_lst = [{"А": "1"}, {"В": "1"}, {"Е": "1"}, {"И": "1"}, {"Н": "1"}, {"О": "1"}, {"Р": "1"}, {"С": "1"}, {"Т": "1"}]
# print("Введите слово: ")
# a = input()
# print(start_lst["А"]) 
# print(start_lst)

# d = dict()  # создали пустой словарь и можем сами создавать свой ключ:
# d['А'] = '1' # чтобы добавлять какие то значения, мы должны в нашем словаре указать ключ q 
# d['В'] = '1' # чтобы добавлять какие то значения, мы должны в нашем словаре указать ключ q 
# print(d) # выведит в одну строку {'q': 'gwerty', 'w': 'werty'}


# print("Введите первое число: ") #- ввод данных через инпут, если числа, то инт добавить
# a = int(input())
# b = int(input("Введите второе число: "))
# print(a, '+', b, '=', a + b)

# for item in dictionary: # for (k,v) in dictionary.items(): как фор взаимодействует с нашим словарем?:
#     print(item)  # будут выводится только наши ключи: up left down right
#     print('{}: {}'.format(item, dictionary[item])) # если к словарю обращаться то сначала к ключу('{}: {}'.format(item,) и 2е к значению dictionary[item]

# Операции со множествами в Python
# a = {а, в, е, и, н, о, Р, С, Т}
# b = {а, в, е, и, н,}
# c = a.copy() # c = {1, 2, 3, 5, 8} можем скопировать из а
# u = a.union(b) # u = {1, 2, 3, 5, 8, 13, 21} объединение а и b и раз уникальные значения 2 будет один раз
# i = a.intersection(b) # i = {8, 2, 5} пересечение т.е найти те элементы, которые есть в обеих множествах

# Задача 16: Требуется вычислить, сколько раз встречается некоторое
# число X в массиве A[1..N]. Пользователь в первой строке вводит
# натуральное число N – количество элементов в массиве. В последующих
# строках записаны N целых чисел Ai. Последняя строка содержит число X
# 5
# 1 2 3 4 5
# 3
# -> 1


# Можно список заполнять не только при его создание, но и во время работы программы: по пересечению надо решить
list_1 = list() # создание пустого списка
for i in range(5): # цикл выполнится 5 раз 
    n = int(input()) # пользователь вводит целое число
    list_1.append(n) # добавление (сохранение) элемента в конец! списка

# for i in list_1: # for при нумерации,для того чтобы узнать какой элемент стоит на той или иной позиции.
    print(list_1) # перебираем занчения в нашем списке и выводим в столбик


# items = int(input())
# num = [0] * items
# for s in range (len(items))






# Задача 18: Требуется найти в массиве A[1..N] самый близкий по
# величине элемент к заданному числу X. Пользователь в первой строке
# вводит натуральное число N – количество элементов в массиве. В
# последующих строках записаны N целых чисел Ai. Последняя строка
# содержит число X
# 5
# 1 2 3 4 5
# 6
# -> 5


# a = {2, 4, 6, 8, 10, 12, 10, 8, 6, 4, 2} # решила , но без ввода 2 чисел. не понятно 
# b = {3, 6, 9, 12, 15, 18}
# i = a.intersection(b) #  пересечение т.е найти те элементы, которые есть в обеих множествах
# print(i) # {12, 6}



# count_numbers = 1
# number_ = int(input(f'Введите число {count_numbers}: '))   
# maximum_ = number_                            
# while number_ != 0:    
#     count_numbers += 1                   
#     number_ = int(input(f'Введите число {count_numbers}: ')) 
#     if number_ > maximum_:
#         maximum_ = number_
# print(f'Наибольший элемент последовательности: {maximum_}')


# домашка 4
# Задача 22: Даны два неупорядоченных набора целых чисел (может быть, с
# повторениями). Выдать без повторений в порядке возрастания все те числа, которые
# встречаются в обоих наборах.
# Пользователь вводит 2 числа. n - кол-во элементов первого множества. m - кол-во
# элементов второго множества. Затем пользователь вводит сами элементы множеств.
# 11 6
# 2 4 6 8 10 12 10 8 6 4 2
# 3 6 9 12 15 18
# 6 12

# a = {2, 4, 6, 8, 10, 12, 10, 8, 6, 4, 2} # решила , но без ввода 2 чисел. не понятно
# b = {3, 6, 9, 12, 15, 18}
# i = a.intersection(b) #  пересечение т.е найти те элементы, которые есть в обеих множествах
# print(i) # {12, 6}

# input_str = 'a a a b c a a d c d d'.split() dict_count = {}  # 'a': 3 # 'b': 1 for let in input_str:     if let in dict_count:         print(f'{let}_{dict_count[let]}', end=' ')         dict_count[let] += 1     else:         print(let, end=' ')         dict_count[let] = 1