# Знакомство с языком Python (лекции)
# Урок 2. Коллекции данных. Профилирование и отладка
# Список - это упорядоченный конечный набор элементов.это тот же самый массив,
# в котором можно хранить элементы любых типов данных.
# list_1 = [] # Создание пустого списка
# list_2 = list() # Создание пустого списка
# list_1 = [7, 9, 11, 13, 15, 17] # Создание списка со значением
# print(list_1[0]) # 7 обращаемся к эелементу-вывести по индексу
# print(*list_1) # убрать квадратные скобочки и запятые 7 9 11 13 15 17

# for i in list_1: # for при нумерации,для того чтобы узнать какой элемент стоит на той или иной позиции.
#     print(list_1) # перебираем занчения в нашем списке и выводим в столбик

# list_1 = [7, 9, 11, 13, 15, 17] 
# print(len(list_1)) # 6-Чтобы узнать количество элементов в списке (лен для любой коллекции данных)

# Можно список заполнять не только при его создание, но и во время работы программы:
list_1 = list() # создание пустого списка
for i in range(5): # цикл выполнится 5 раз 
    n = int(input()) # пользователь вводит целое число
    list_1.append(n) # добавление (сохранение) элемента в конец! списка
# 1-я итерация цикла(повторение 1): n = 12, list_1 = [12]
# 2-я итерация цикла(повторение 2): n = 7, list_1 = [12, 7]
# 3-я итерация цикла(повторение 3): n = -1, list_1 = [12, 7, -1]
# 4-я итерация цикла(повторение 4): n = 21, list_1 = [12, 7, -1, 21]
# 5-я итерация цикла(повторение 5): n = 0, list_1 = [12, 7, -1, 21, 0]
print(list_1) # [12, 7, -1, 21, 0]


# list_1 = [] # создание пустого списка
# print(list_1) # вывели пустой список []
# for i in range(5): # потом туда направились 0,1,2,3,4(i будет принимать значение от 0 до 4)
#     list_1.append(i) # добавление в наш список значение i 
#     print(list_1)
# # []
# # [0]
# # [0, 1]
# # [0, 1, 2]
# # [0, 1, 2, 3]
# # [0, 1, 2, 3, 4]

# Основные действия со списками:
# 1. Удаление последнего элемента списка.
# list_1 = [12, 7, -1, 21, 0]
# print(list_1.pop()) # 0 и pop также и возвращает нулевой элемент, здесь не поняла-удаляет и возвращает
# print(list_1) # [12, 7, -1, 21]
# print(list_1.pop()) # 21
# print(list_1) # [12, 7, -1]
# print(list_1.pop()) # -1
# print(list_1) # [12, 7]

# 2. Удаление конкретного элемента из списка.
# list_1 = [12, 7, -1, 21, 0]
# print(list_1.pop(0)) # 12 удалили нулевой индекс
# print(list_1) # [7, -1, 21, 0]

# 3. Добавление элемента на нужную позицию
# list_1 = [12, 7, -1, 21, 0]
# print(list1.insert(2, 11)) # 2-это на какой элемент хотим вставить число 11
# print(list1) # [12, 7, 11, -1, 21, 0]

# Срез списка: хотим вывести
# list_1 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
# print(list_1[0]) # 1
# print(list_1[1]) # 2
# print(list_1[len(list_1)-1]) # 10
# print(list_1[-1]) # 10 тоже самое к последнему элементу
# print(list_1[-5]) # 6
# print(list_1[:]) # [1, 2, 3, 4, 5, 6, 7, 8, 9, 10] от начала и до конца
# print(list_1[:2]) # [1, 2]
# print(list_1[len(list_1)-2:]) #[9, 10]
# print(list_1[-2:]) #[9, 10] тоже самое от второго последнего и до конца
# print(list_1[2:9]) # [3, 4, 5, 6, 7, 8, 9] интервал от 2 до 9 индекса
# print(list_1[6:-18]) # [] здесь нет этих индексов, пустой выводит
# print(list_1[0:len(list_1):6]) # [1, 7] от начала и до конца с шагом 6
# print(list_1[::6]) # [1, 7] тоже самое от начала и до конца с шагом 6

# Кортежи- (tuple)это неизменяемый список, от намеренных или случайных изменений.
# t = () # создание пустого кортежа
# print(type(t)) # class <'tuple'>
# t = (1,) # это создать кортеж
# print(type(t))
# t = (1) # видит что это целое число
# print(type(t))
# t = (28, 9, 1990) # это кортеж, но не понятно почему здесь запятую не надо и вывел кортеж
# print(type(t))

# colors = ['red', 'green', 'blue'] # это пример из методички не расматривали на уроке
# print(colors) # ['red', 'green', 'blue']
# t = tuple(colors)
# print(t) # ('red', 'green', 'blue')
# t = tuple(['red', 'green', 'blue'])
# print(t[0]) # red
# print(t[2]) # blue
# for e in t:
# print(e) # red green blue - не понятно это e - что ?
# t[0] = 'black' # TypeError: 'tuple' object does not support(нельзя изменять кортеж)

# на уроке дальше:
# v = [1, 8, 9] # у нас есть список(выведен в[] лист) и хотим преобразовать его в кортеж
# print(v)
# print(type(v))

# v = tuple(v) #  tuple преобразовать в кортеж, выводит в круглых скобках
# print(v)
# print(type(v))

# a,b,c = v # разьединим наш кортеж
# print(a, b, c) # 1 8 9 распаковка нашего кортежа


# Чем наш кортеж будет отличаться от списка?:
# t = (1, 2, 3, 5,)  # создаем кортеж 
# print(t[1]) # выводим наш кортеж по каждому индексу
# for i in t:
#     print(i) # выводим наш кортеж по всем элементам


# for i in range(len(t)): # наш цикл можно и со списками  выводим наш кортеж по всей длине
#     print(t[i]) # выводим не i , а t[i] мы используем индекс для вывода и это также работает

# Допустим хотим изменить элемент в кортеже:
# t[0] = 2 # TypeError: 'tuple' object does not support(нельзя изменять кортеж)

# t = [1, 2, 3, 5,]  # но если бы это был список, то ошибок не будет:
# print(t)
# t[0] = 2
# print(t)

# Словари — неупорядоченные коллекции произвольных объектов с доступом по ключу.
# В списках в качестве ключа используется индекс элемента. 
# В словаре для определения элемента используется значение ключа (строка, число).
# dictionary = {} # создали пустой словарь
# d = {} # создали пустой словарь
# d = dict() # создали пустой словарь и можем сами создавать свой ключ:
# d['q'] = 'gwerty' # чтобы добавлять какие то значения, мы должны в нашем словаре указать ключ q 
# print(d)  # {'q': 'gwerty'} в нашем словаре есть ключ, по которому обратившись получишь значение

# d['w'] = 'werty' # чтобы добавлять какие то значения, мы должны в нашем словаре указать ключ q 
# print(d) # выведит в одну строку {'q': 'gwerty', 'w': 'werty'}
# print(d['w']) # в квадратных скобках дает выбор -> werty


# dictionary ={'up': '↑', 'left': '←', 'down': '↓', 'right': '→'}
# print(dictionary) # {'up':'↑', 'left':'←', 'down':'↓', 'right':'→'}
# print(dictionary['left']) # ← будет выводится по ключу left стрелочка(значение) ←
# # типы ключей могут отличаться:
# print(dictionary['up']) # ↑
# # типы ключей могут отличаться:
# dictionary['left'] = '⇐'
# print(dictionary['left']) # ⇐
# print(dictionary['type']) # KeyError: 'type' хотим вывести слово которго нет в нашем словаре,выведит ошибку, нет элемента
# del dictionary['left'] # удаление элемента
# for item in dictionary: # for (k,v) in dictionary.items(): как фор взаимодействует с нашим словарем?:
#     print(item)  # будут выводится только наши ключи: up left down right
#     print('{}: {}'.format(item, dictionary[item])) # если к словарю обращаться то сначала к ключу('{}: {}'.format(item,) и 2е к значению dictionary[item]
# up: ↑
# left: ←
# down: ↓
# right: →

# еще один пример:
# dictionary = {} # создали пустой словарь
# dictionary ={'up': '↑', 'left': '←', 'down': '↓', 'right': '→'}
# print(dictionary.items()) # что же за такое dictionary.items?=>
# # =>dict_items([('up', '↑'), ('left', '←'), ('down', '↓'), ('right', '→')]) видим список []где каждый элемент будет кортеж двух значений:ключ и вывод('up', '↑') 
# for (k, v) in dictionary.items(): # т.е здесь мы проходим по k- ключу и v- нашим значениям
#     print(k, v) # т.е здесь мы проходим по k- ключу и v- нашим значениям

# Множества {' ',} (отличие от словаря обозначение {'up': '↑',}) содержат в себе уникальные элементы, не обязательно упорядоченные.
# Одно множество может содержать значения любых типов. Если у Вас есть два
# множества, Вы можете совершать над ними любые стандартные операции,
# например, объединение, пересечение и разность. Давайте разберем их.
# colors = {'red', 'green', 'blue'}
# print(colors) # {'red', 'green', 'blue'}
# colors.add('red') # функцией add добавляем значение
# print(colors) # {'red', 'green', 'blue'}  добавляет только уникальное значение, поэтому тоже самое
# colors.add('gray') # функцией add добавляем значение, но не обязательно в конце!если хотим упорядочивать, то надо использовать списки
# print(colors) # {'red', 'green', 'blue','gray'}
# colors.remove('red') # удалили ред
# print(colors) # {'green', 'blue','gray'}
# colors.remove('red') # KeyError: 'red' # удалили ред второй раз, ошибку выдает чтобы избежать 
# colors.discard('red') # ok discard проверяет есть ли ред здесь и просто пропускает строку и не выдает ошибку
# print(colors) # {'green', 'blue','gray'}
# colors.clear() # { } удалить все множества
# print(colors) # set() получится при удалении всех множеств
# q = set()  # при помощи set() можно создавать множества # print(set(lst-ваш список))перевести список в множество(упорядоченный уникальный список set)

# Операции со множествами в Python
# a = {1, 2, 3, 5, 8}
# b = {2, 5, 8, 13, 21}
# c = a.copy() # c = {1, 2, 3, 5, 8} можем скопировать из а
# u = a.union(b) # u = {1, 2, 3, 5, 8, 13, 21} объединение а и b и раз уникальные значения 2 будет один раз
# i = a.intersection(b) # i = {8, 2, 5} пересечение т.е найти те элементы, которые есть в обеих множествах
# dl = a.difference(b) # dl = {1, 3} можем найти разность а-b берем а{1, 2, 3, 5, 8} вычитаем b (2,5,8) = остается 1,3
# dr = b.difference(a) # dr = {13, 21} и здесь наоборот из {2, 5, 8, 13, 21} вычесть одинаковые (2,5,8) = остается 13,21 
# q = a.union(b).difference(a.intersection(b)) # {1, 21, 3, 13}
# 1шаг:найти пересечение а и b - a.intersection(b) получилось{8, 2, 5};
# 2шаг: потом по порядку а обьединяем с b - a.union(b) получилось {1, 2, 3, 5, 8, 13, 21};
# 3шаг:и затем из полученного множества в шаге2 находим разность с этим множеством a.intersection(b)
# {1, 2, 3, 5, 8, 13, 21} {8, 2, 5} = 1,3,13,21
# print(q)

# Неизменяемое или замороженное множество(frozenset) — множество, с которым
# не будут работать методы удаления и добавления.
# a = {1, 2, 3, 5, 8}
# b = frozenset(a) #создали новое неизменяемое множество b
# print(b) # frozenset({1, 2, 3, 5, 8})


# List Comprehension «генератор списка» — это упрощенный подход к созданию списка, который
# задействует цикл for, а также инструкции if-else для определения того, что в итоге окажется в финальном списке.

# 1. Простая ситуация — список:
# list_1 = [exp for item in iterable] #создаем список мы добавляем какое то значение exp идя по какой то коллекции данных iterable
# list_1 = [None for item in range(5)] # означает что мы (item эелемент,предмет)5 раз добавим в наш список значение None

# list_1 = [None]  # это мы бы создали по другому, выше короче ↑
# for i in range(5):

# 2. Выборка по заданному условию(if conditional):
# list_1 = [exp for item in iterable (if conditional)]

# Задача: Создать список, состоящий из четных чисел в диапазоне от 1 до 100.
# Решение:
# 1. Создать список чисел от 1 до 100
# list_1 = []
# for i in range(1, 101):
# list_1.append(i) # "append"-сохранение элемента в конец списка
# print(list_1) # [1, 2, 3,. .., 100]

# Эту же функцию можно записать так:
# list_1 = [i for i in range(1, 101)] # [1, 2, 3,..., 100]
# print(list_1)

# 2. Добавить условие (только чётные числа)
# list_1 = [i for i in range(1, 101) if i % 2 == 0] # [2, 4, 6,..., 100] i добвляется только при условии если остаток от деления равен нулю 0
# print(list_1)

# Допустим, вы решили создать пары каждому из чисел (кортежи)
# list_1 = [(i, i) for i in range(1, 101) if i % 2 == 0] # [(2, 2), (4, 4),...,(100, 100)]
# list_1 = [(i, i*i) for i in range(1, 101) if i % 2 == 0] # [(2, 4), (4, 16),...,(100, 10000)] i- обычное и квадрат этого числа
# print(list_1)

# Также можно умножать, делить, прибавлять, вычитать. Например, умножить значение на 2.
# list_1 = [i * 2 for i in range(10) if i % 2 == 0] # также выводим только четные числа
# print(list_1) # [0, 4, 8, 12, 16]

